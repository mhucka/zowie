# =============================================================================
# @file    .github/workflows/codacy-analysis.yml
# @brief   Codacy code scanning for GitHub configuration
# @author  Michael Hucka <mhucka@caltech.edu>
# @license Please see the file named LICENSE in the project directory
# @website https://github.com/mhucka/zowie
#
# The following info was present in the file header of the original .yml file
# created when I enabled Codacy scanning on the repo on GitHub:
# 
#    This workflow checks out code, performs a Codacy security scan
#    and integrates the results with the
#    GitHub Advanced Security code scanning feature.  For more information
#    on the Codacy security scan action usage and parameters, see
#    https://github.com/codacy/codacy-analysis-cli-action.
#    For more information on Codacy Analysis CLI in general, see
#    https://github.com/codacy/codacy-analysis-cli.
# =============================================================================

name: Codacy Security Scan

on:
  push:
    branches: [ develop ]
    paths-ignore:
      - '**/*.md'
      - '**/*.txt'
      - '**/*.pdf'
      - LICENSE
      - Makefile
      - codemeta.json
  pull_request:
    branches: [ develop ]
    paths-ignore:
      - '**/*.md'
      - '**/*.txt'
      - '**/*.pdf'
      - LICENSE
      - Makefile
      - codemeta.json

jobs:
  codacy-security-scan:
    name: Codacy Security Scan
    runs-on: macos-latest
    steps:
      # Checkout the repository to the GitHub Actions runner.
      - name: Checkout code
        uses: actions/checkout@v2

      # Execute Codacy Analysis CLI and generate a SARIF output with the
      # security issues identified during the analysis.
      - name: Run Codacy Analysis CLI
        uses: codacy/codacy-analysis-cli-action@1.1.0
        with:
          # Check https://github.com/codacy/codacy-analysis-cli#project-token
          # to get your project token from your Codacy repository You can
          # also omit the token and run the tools that support default
          # configurations.
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          verbose: true
          output: results.sarif
          format: sarif
          # Adjust severity of non-security issues.
          gh-code-scanning-compat: true
          # Force 0 exit code to allow SARIF file generation.
          # This will handover control about PR rejection to the GitHub side.
          max-allowed-issues: 2147483647

      # Upload the SARIF file generated in the previous step.
      - name: Upload SARIF results file
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: results.sarif
